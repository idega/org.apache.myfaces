<web-app version="3.0"
  xmlns="http://java.sun.com/xml/ns/javaee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="
    http://java.sun.com/xml/ns/javaee
    http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">

	<context-param>
		<description>
			State saving method: "client" or "server" (= default) See
			JSF Specification 2.5.2
		</description>
		<param-name>javax.faces.STATE_SAVING_METHOD</param-name>
		<param-value>client</param-value>
	</context-param>

	<context-param>
		<description>
			This parameter tells MyFaces if javascript code should be
			allowed in the rendered HTML output. If javascript is
			allowed, command_link anchors will have javascript code that
			submits the corresponding form. If javascript is not
			allowed, the state saving info and nested parameters will be
			added as url parameters. Default: "true"
		</description>
		<param-name>org.apache.myfaces.ALLOW_JAVASCRIPT</param-name>
		<param-value>true</param-value>
	</context-param>

	<context-param>
		<description>
			This parameter tells MyFaces if javascript code should be
			allowed in the rendered HTML output. If javascript is
			allowed, command_link anchors will have javascript code that
			submits the corresponding form. If javascript is not
			allowed, the state saving info and nested parameters will be
			added as url parameters. Default: "false"

			Setting this param to true should be combined with
			STATE_SAVING_METHOD "server" for best results.

			This is an EXPERIMENTAL feature. You also have to enable the
			detector filter/filter mapping below to get JavaScript
			detection working.
		</description>
		<param-name>org.apache.myfaces.DETECT_JAVASCRIPT</param-name>
		<param-value>false</param-value>
	</context-param>

	<context-param>
		<description>
			If true, rendered HTML code will be formatted, so that it is
			"human readable". i.e. additional line separators and
			whitespace will be written, that do not influence the HTML
			code. Default: "true"
		</description>
		<param-name>org.apache.myfaces.PRETTY_HTML</param-name>
		<param-value>true</param-value>
	</context-param>

	<context-param>
		<description>
			If true, a javascript function will be rendered that is able
			to restore the former vertical scroll on every request.
			Convenient feature if you have pages with long lists and you
			do not want the browser page to always jump to the top if
			you trigger a link or button action that stays on the same
			page. Default: "false"
		</description>
		<param-name>org.apache.myfaces.AUTO_SCROLL</param-name>
		<param-value>false</param-value>
	</context-param>
	
	<context-param>
		<param-name>org.apache.myfaces.ADD_RESOURCE_CLASS</param-name>
		<param-value>com.idega.util.resources.ResourcesAdder</param-value>
	</context-param>
	
	<context-param>
		<param-name>org.apache.myfaces.CHECK_EXTENSIONS_FILTER</param-name>
		<param-value>true</param-value>
	</context-param>
	
	
	

	<!-- WelcomeFile Filter -->
	<!--
		<filter>
		<filter-name>WelcomeFile Filter</filter-name>
		<filter-class>org.apache.myfaces.webapp.filter.WelcomeFileFilter</filter-class>
		<description>
		Due to the manner in which the JSP / servlet lifecycle
		functions, it is not currently possible to specify default
		welcome files for a web application and map them to the
		MyFacesServlet.  Normally they will be mapped to the
		default servlet for the JSP container.  To offset this
		shortcoming, we utilize a servlet Filter which examines
		the URI of all incoming requests.
		</description>
		</filter>
	-->

	<!-- JavaScriptDetector Filter -->
	<!--    <filter>-->
	<!--        <filter-name>javascriptDetector</filter-name>-->
	<!--        <filter-class>org.apache.myfaces.webapp.filter.JavaScriptDetectorFilter</filter-class>-->
	<!--    </filter>-->



	<!-- MyFaces Extensions Filter MOVED TO CORE -->

	<!-- Filter Mappings -->

	<!-- see MyFaces Filter above for a description -->
	<!--
		<filter-mapping>
		<filter-name>WelcomeFile Filter</filter-name>
		<url-pattern>/*</url-pattern>
		</filter-mapping>
	-->

	<!-- Listener, that does all the startup work (configuration, init). -->
	<listener>
		<listener-class>
			org.apache.myfaces.webapp.StartupServletContextListener
		</listener-class>
	</listener>

	<!-- Faces Servlet -->
	<servlet>
		<servlet-name>Faces Servlet</servlet-name>
		<servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>


	<!-- Faces Servlet Mapping -->

	<!-- virtual path mapping -->
	<servlet-mapping>
		<servlet-name>Faces Servlet</servlet-name>
		<url-pattern>/faces/*</url-pattern>
	</servlet-mapping>

	<!-- extension mapping -->
	<servlet-mapping>
		<servlet-name>Faces Servlet</servlet-name>
		<url-pattern>*.jsf</url-pattern>
	</servlet-mapping>

	<!-- Welcome files - Commented out for now
		<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>index.html</welcome-file>
		</welcome-file-list>
	-->
	
</web-app>
